{"version":3,"file":"main.js","sources":["../../modules/utils.mjs","../../lib/main.js"],"sourcesContent":["/* global unsafeWindow, globalThis */\n\n\n\nexport const\n\n    IS_UNSAFE = typeof unsafeWindow !== 'undefined',\n    IS_BROWSER = typeof window !== 'undefined' && typeof window.document !== 'undefined',\n    IS_TOUCH = typeof ontouchstart !== 'undefined',\n    noop = () => { },\n    identity = x => x,\n    global = IS_UNSAFE ? unsafeWindow : globalThis ?? window,\n    { JSON, document } = global,\n    isPlainObject = (param) => param instanceof Object && Object.getPrototypeOf(param) === Object.prototype,\n    isUndef = (param) => typeof param === 'undefined',\n    isString = (param) => typeof param === 'string',\n    isNumber = (param) => typeof param === 'number',\n    isInt = (param) => Number.isInteger(param),\n    isFloat = (param) => isNumber(param) && parseFloat(param) === param,\n    isUnsigned = (param) => param >= 0 && isNumber(param),\n    isUnsignedInt = (param) => param >= 0 && isInt(param),\n    isNumeric = (param) => isInt(param) || isFloat(param) || /^-?(?:[\\d]+\\.)?\\d+$/.test(param),\n    intVal = (param) => isNumeric(param) && parseInt(param),\n    floatVal = (param) => isNumeric(param) && parseFloat(param),\n    isBool = (param) => typeof param === 'boolean',\n    isArray = (param) => Array.isArray(param),\n    isNull = (param) => param === null,\n    isObject = (param) => typeof param === 'object' && !isNull(param),\n    isCallable = (param) => typeof param === 'function',\n    isFunction = isCallable,\n    isScalar = (param) => isNumeric(param) || isString(param) || isBool(param),\n    capitalize = (param) => isString(param) && param.split(/\\s+/).map(param => param.charAt(0).toUpperCase() + param.slice(1).toLowerCase()).join(' ');\n\n\n\nconst\n    VALID_REFERERRPOLICY = [\n        'no-referrer', 'no-referrer-when-downgrade',\n        'origin', 'origin-when-cross-origin',\n        'same-origin', 'strict-origin',\n        'strict-origin-when-cross-origin', 'unsafe-url'\n    ],\n    VALID_CROSSORIGIN = ['', 'use-credentials', 'anonymous'];\n\n\n\nexport function getClass(param)\n{\n\n    if (isFunction(param))\n    {\n        return param.name;\n    }\n    else if (param instanceof Object)\n    {\n        return Object.getPrototypeOf(param).constructor.name;\n    }\n\n}\n\nexport function isEmpty(param)\n{\n\n    if (isUndef(param) || param === null)\n    {\n        return true;\n    }\n    if (isString(param) || isArray(param))\n    {\n        return param.length === 0;\n    }\n    if (isNumber(param))\n    {\n        return param === 0;\n    }\n\n    if (isPlainObject(param))\n    {\n        return Object.keys(param).length === 0;\n    }\n    return false;\n}\n\nexport function runAsync(callback, ...args)\n{\n    if (isFunction(callback))\n    {\n        setTimeout(callback, 0, ...args);\n    }\n}\n\n\n/**\n * Creates a promise that resolves a value\n * \n * @param {any} value \n * @param {Function} onResolve A transformation function\n * @param {Function} onReject \n */\nexport function promisify(value, onResolve = identity, onReject = (val, err) => err)\n{\n\n    if (value instanceof Promise)\n    {\n\n        return value.then(val =>\n        {\n            let newval = onResolve(val);\n            if (isUndef(newval))\n            {\n                return val;\n            }\n            return newval;\n\n        }).catch(err => onReject(value, err));\n    }\n\n    return promisify(Promise.resolve(value), onResolve, onReject);\n}\n\n\n\nexport function isValidSelector(selector)\n{\n\n    try\n    {\n        return isString(selector) && null === document.createElement('template').querySelector(selector);\n\n    } catch (e)\n    {\n        return false;\n    }\n\n}\n\n\nexport function uuidv4()\n{\n    let uuid = \"\", i, random;\n    for (i = 0; i < 32; i++)\n    {\n        random = Math.random() * 16 | 0;\n        if (i == 8 || i == 12 || i == 16 || i == 20)\n        {\n            uuid += \"-\";\n        }\n        uuid += (i == 12 ? 4 : (i == 16 ? (random & 3 | 8) : random)).toString(16);\n    }\n    return uuid;\n}\n\n\nexport function isElement(elem)\n{\n    return elem instanceof Object && isFunction(elem.querySelector);\n}\n\n\nexport function toCamel(name = '')\n{\n\n    if (!isString(name))\n    {\n        throw new TypeError('name must be a String');\n    }\n\n    let index;\n    while (-1 < (index = name.indexOf(\"-\")))\n    {\n        name = name.slice(0, index) + name.slice(index + 1, 1).toUpperCase() + name.slice(index + 2);\n    }\n    return name;\n}\n\nexport function toDashed(name)\n{\n    return name.replace(/([A-Z])/g, function (u)\n    {\n        return \"-\" + u.toLowerCase();\n    });\n}\n\nexport function isHTML(param)\n{\n    return isString(param) && param.startsWith('<') && param.endsWith('>');\n}\n\n\n\nexport function isJSON(param)\n{\n\n    if (!isString(param))\n    {\n        return false;\n    }\n\n    return (\n        isNumeric(param) ||\n        ['true', 'false', 'null'].includes(param) ||\n        ['{', '[', '\"'].includes(param.slice(0, 1)) ||\n        ['}', ']', '\"'].includes(param.slice(-1))\n    );\n\n}\n\n\nexport function decode(value)\n{\n\n    if (isUndef(value) || isNull(value))\n    {\n        return null;\n    }\n    if (isJSON(value))\n    {\n        try\n        {\n            return JSON.parse(value);\n        } catch (error)\n        {\n            // fallback for invalid json data\n            return value;\n        }\n\n    }\n\n    return value;\n}\n\n\nexport function encode(value)\n{\n\n    if (isFunction(value) || isUndef(value))\n    {\n        return value;\n    }\n\n\n    return isString(value) ? value : JSON.stringify(value);\n}\n\n\nfunction parseAttributes(obj, /** @type {string|undefined} */ name)\n{\n\n    let result = [];\n\n    for (let key in obj)\n    {\n        const value = obj[key];\n\n        if (isPlainObject(value))\n        {\n            result = result.concat(parseAttributes(value)).map(\n                item => [[key, item[0]].join('-'), item[1]]\n            );\n\n            continue;\n        }\n        result.push([key, encode(value)]);\n    }\n    return result.map(item => name ? [[name, item[0]].join('-'), item[1]] : item);\n}\n\n\n\n\n\nfunction validateHtml(html)\n{\n    return isString(html) || isElement(html) || isArray(html);\n}\n\nconst RESERVED_KEYS = [\n    'data', 'dataset',\n    'html', 'tag',\n    'callback'\n];\n\n\n/**\n * Shorthand to create element effortlessly\n * if no params are given a <div></div> will be generated\n * \n * @param {String} [tag] tag name / html / emmet\n * @param {Object} [params] params to inject into element\n * @param {String|HTMLElement|String[]|HTMLElement[]} [html] \n * @returns \n */\nexport function createElement(\n    tag = 'div',\n    params = {},\n    html = null\n)\n{\n\n    if (isPlainObject(tag))\n    {\n        params = tag;\n        tag = params.tag ?? 'div';\n    }\n\n    if (typeof tag !== 'string')\n    {\n        throw new TypeError('tag must be a String');\n    }\n\n    if (validateHtml(params))\n    {\n        html = params;\n        params = {};\n    }\n\n    const elem = isHTML(tag) ? html2element(tag) : document.createElement(tag);\n\n    let callback;\n\n    if (!isElement(elem))\n    {\n        throw new TypeError(\"Invalid tag supplied \" + tag);\n    }\n\n    if (isPlainObject(params))\n    {\n        const data = [];\n\n        callback = params.callback;\n\n        if (!validateHtml(html))\n        {\n            html = params.html;\n        }\n\n        if (isPlainObject(params.data))\n        {\n            data.push(...parseAttributes(params.data, 'data'));\n        }\n\n        if (isPlainObject(params.dataset))\n        {\n            data.push(...parseAttributes(params.dataset, 'data'));\n        }\n\n\n        data.forEach(item => elem.setAttribute(...item));\n\n\n        if (isArray(params.class))\n        {\n            params.class = params.class.join(\" \");\n        }\n\n        for (let attr in params)\n        {\n            if (RESERVED_KEYS.includes(attr))\n            {\n                continue;\n            }\n\n            let value = params[attr];\n\n            if (isString(value))\n            {\n                let current = elem.getAttribute(attr) ?? '';\n                if (current.length > 0)\n                {\n                    value = current + ' ' + value;\n                }\n\n                elem.setAttribute(attr, value);\n            }\n            else if (isPlainObject(value))\n            {\n                parseAttributes(value, attr).forEach(item => elem.setAttribute(...item));\n            }\n            else\n            {\n                elem[attr] = value;\n            }\n        }\n\n\n    }\n\n    if (validateHtml(html))\n    {\n        if (!isArray(html))\n        {\n            html = [html];\n        }\n\n        for (let child of html)\n        {\n            if (isElement(child))\n            {\n                elem.appendChild(child);\n            }\n            else\n            {\n                elem.innerHTML += child;\n            }\n        }\n    }\n\n    if (isFunction(callback))\n    {\n        callback(elem);\n    }\n\n    return elem;\n\n}\n\n\n/**\n * Generate a unique ID\n * @returns {String}\n */\nexport function uniqid()\n{\n\n    let value = '';\n    uniqid.values ??= new Set();\n    do\n    {\n        value = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\n    }\n    while (uniqid.values.has(value));\n    uniqid.values.add(value);\n    return value;\n}\n\n\n\n\n/**\n * Clones an Object/Array\n * @param {Object} obj\n * @returns {Object|undefined}\n */\nexport function clone(obj)\n{\n\n    if (isArray(obj))\n    {\n        return Array.from(obj);\n    }\n\n\n    if (obj instanceof Object)\n    {\n        return Object.assign({}, obj);\n    }\n\n    return obj;\n}\n\n/**\n * Clones Object recursively\n * \n * @param {Object} obj \n * @returns \n */\nexport function cloneRecursive(obj)\n{\n    if (obj instanceof Object)\n    {\n\n        if (isArray(obj))\n        {\n\n            return Array.from(obj).map(value =>\n            {\n                if (isPlainObject(value) || isArray(value))\n                {\n                    return cloneRecursive(value);\n                }\n                return value;\n            });\n        }\n\n        if (!isPlainObject(obj))\n        {\n            throw new TypeError('Invalid Object supplied.');\n        }\n\n        obj = clone(obj);\n        for (let prop in obj)\n        {\n            if (isPlainObject(obj[prop]) || isArray(obj[prop]))\n            {\n                obj[prop] = cloneRecursive(obj[prop]);\n            }\n        }\n\n    }\n\n    return obj;\n}\n\n/**\n * Convert an element to its outer html\n * \n * @param {HTMLElement|NodeList|HTMLElement[]} elem \n * @returns {String|undefined}\n */\nexport function element2html(elem)\n{\n\n    if (isElement(elem))\n    {\n        elem = [elem];\n    }\n    if (elem instanceof NodeList)\n    {\n        elem = [...elem];\n    }\n\n    if (isArray(elem))\n    {\n        return createElement('div', elem.map(el => el.cloneNode(true))).innerHTML;\n    }\n}\n\n\n\n\n\n/**\n * Creates a Document from html code\n * @param {string} html\n * @returns {documentElement}\n */\nexport function html2doc(html)\n{\n    let node = document.implementation.createHTMLDocument().documentElement;\n    if (isString(html) && html.length > 0)\n    {\n        node.innerHTML = html;\n    }\n    return node;\n}\n\n/**\n * Creates an HTMLElement from html code\n * @param {string} html\n * @returns {HTMLElement|Array|undefined}\n */\nexport function html2element(html)\n{\n    if (isString(html) && html.length > 0)\n    {\n        let template = createElement('template', html),\n            content = template.content;\n        if (content.childNodes.length === 0)\n        {\n            return;\n        }\n        else if (content.childNodes.length > 1)\n        {\n            return [...content.childNodes];\n        }\n        return content.childNodes[0];\n    }\n}\n\n\n/**\n * Resolves an URL\n * \n * @param {URL|String} url \n * @returns {URL|undefined}\n */\nexport function getUrl(url)\n{\n    if (isString(url))\n    {\n        const a = getUrl.a ??= createElement(\"a\");\n        getUrl.a.href = url;\n        url = new URL(a.href);\n    }\n\n\n    if (url instanceof URL)\n    {\n        return url;\n    }\n\n}\n\nexport function selectText(node)\n{\n    if (document.body.createTextRange)\n    {\n        const range = document.body.createTextRange();\n        range.moveToElementText(node);\n        range.select();\n    } else if (window.getSelection)\n    {\n        const selection = window.getSelection(), range = document.createRange();\n        range.selectNodeContents(node);\n        selection.removeAllRanges();\n        selection.addRange(range);\n    } else\n    {\n        console.warn(\"Could not select text in node: Unsupported browser.\");\n    }\n}\n\nexport function removeAccent(str)\n{\n    let accent = [\n        /[\\300-\\306]/g, /[\\340-\\346]/g, // A, a\n        /[\\310-\\313]/g, /[\\350-\\353]/g, // E, e\n        /[\\314-\\317]/g, /[\\354-\\357]/g, // I, i\n        /[\\322-\\330]/g, /[\\362-\\370]/g, // O, o\n        /[\\331-\\334]/g, /[\\371-\\374]/g, // U, u\n        /[\\321]/g, /[\\361]/g, // N, n\n        /[\\307]/g, /[\\347]/g, // C, c\n    ], noaccent = ['A', 'a', 'E', 'e', 'I', 'i', 'O', 'o', 'U', 'u', 'N', 'n', 'C', 'c'];\n\n\n    for (var i = 0; i < accent.length; i++)\n    {\n        str = str.replace(accent[i], noaccent[i]);\n    }\n\n    return str;\n}\n\n\n\nexport function loadScript(url, options)\n{\n    return new Promise((resolve, reject) =>\n    {\n        const params = Object.assign({\n            async: null,\n            defer: null,\n            crossorigin: null,\n            referrerpolicy: null,\n            type: null,\n        }, options ?? {});\n\n        let { async, defer, crossorigin, referrerpolicy, type } = params;\n\n        if (async !== true)\n        {\n            async = null;\n        }\n\n        if (defer !== true)\n        {\n            defer = null;\n        }\n\n        if (VALID_CROSSORIGIN.includes(crossorigin))\n        {\n            crossorigin = null;\n        }\n        if (VALID_REFERERRPOLICY.includes(referrerpolicy))\n        {\n            referrerpolicy = null;\n        }\n        if (type !== 'module')\n        {\n            type = null;\n        }\n\n        if (url = getUrl(url))\n        {\n\n            const script = createElement('script', {\n                src: url,\n                onload: () => resolve(script),\n                onerror: () => reject(new Error(\"Cannot load \" + url)),\n                id: uniqid()\n            });\n\n            for (let param in params)\n            {\n                let value = params[param];\n                if (null !== value)\n                {\n                    script[param] = value;\n                }\n            }\n\n            document.getElementsByTagName('head')[0].appendChild(script);\n        }\n\n    });\n}\n\n\n/**\n * PHP BackedEnum like Api\n * Accepts more types than (str|int)\n */\nexport class BackedEnum\n{\n\n\n    /**\n     * This is the first defined case\n     * Overrirde this to set your own default case\n     */\n    static get default()\n    {\n        return this.cases()[0];\n    }\n\n\n    /**\n     * Get the enum from the value\n     */\n    static tryFrom(value)\n    {\n\n        if (getClass(value) === getClass(this) && !isFunction(value))\n        {\n            return value;\n        }\n\n        return this.cases().find(x => x.value === value);\n    }\n\n    /**\n     * Throws if enum does not exists\n     */\n    static from(value)\n    {\n\n        const result = this.tryFrom(value);\n\n        if (isUndef(result))\n        {\n            throw new TypeError(\"Cannot find matching enum to: \" + encode(value));\n        }\n        return result;\n    }\n\n\n    /**\n     * \n     * @returns {BackedEnum[]}\n     */\n    static cases()\n    {\n        return this.keys.map(x => this[x]);\n    }\n\n\n    /**\n     * Gets names from the enums\n     * they must be camel cased or uppercased\n     */\n    static get keys()\n    {\n        return Object.keys(this).filter(name => name[0] === name[0].toUpperCase() && this[name] instanceof BackedEnum);\n    }\n\n    /**\n     * Get the number of values\n     * length is buggy on static classes\n     */\n    static get size()\n    {\n        return this.keys.length;\n    }\n\n\n    //------------------- Instance implementation -------------------\n\n\n    /**\n     * Get current enum name\n     * Only works if enum instanciated correctly\n     * and after the constructor has been called\n     */\n    get name()\n    {\n        return Object.keys(this.constructor).find(\n            key => this.constructor[key] === this\n        ) ?? '';\n    }\n\n\n    constructor(value)\n    {\n\n        if (Object.getPrototypeOf(this) === BackedEnum.prototype)\n        {\n            throw new Error('Cannot instantiate BackedEnum directly, it must be extended.');\n        }\n\n        if (isUndef(value) || isFunction(value))\n        {\n            throw new TypeError('value is not valid');\n        }\n\n        Object.defineProperty(this, \"value\", {\n            writable: false, configurable: false, enumerable: true,\n            value\n        });\n\n\n    }\n}\n\n/**\n * Make a queue of functions to run later\n */\n\nexport function runLater(...fns)\n{\n\n\n    const toRun = new Map();\n\n    for (let arr of fns)\n    {\n        if (!isArray(arr))\n        {\n            arr = [arr];\n        }\n\n        let fn = arr.shift();\n\n        if (isFunction(fn))\n        {\n            toRun.set(fn, arr);\n        }\n    }\n\n    return () =>\n    {\n\n        const result = [];\n        for (const [fn, args] of toRun.entries())\n        {\n            result.push(fn(...args));\n        }\n        return result;\n\n    };\n}\n\n","import { createElement } from '../modules/utils.mjs';\nimport '../scss/main.scss';\nimport { Api } from './api/api';\n\n/**\n * Your code there\n */\n\n\nconst dismissable = new Set();\n\nconst\n    notifArea = document.querySelector(\".notifications\"),\n    tbody = document.querySelector('tbody');\n\nfunction dismissAlert(alert)\n{\n\n    if (dismissable.has(alert))\n    {\n        return;\n    }\n\n    dismissable.add(alert);\n    alert.classList.add('dismiss');\n    setTimeout(() =>\n    {\n        alert.remove();\n    }, 800);\n}\n\n\n\nfunction setDismissable(alert)\n{\n    alert.addEventListener('click', ({ target }) =>\n    {\n        if (target.closest('.btn-close'))\n        {\n            dismissAlert(alert);\n        }\n    });\n\n    setTimeout(() =>\n    {\n\n        if (alert.parentElement)\n        {\n            dismissAlert(alert);\n\n        }\n\n    }, 2000);\n}\n\ndocument.querySelectorAll(\".notifications .alert-dismissible\").forEach(alert =>\n{\n    setDismissable(alert);\n});\n\n\n// AJAX\n\n\nfunction addTasks(tasks)\n{\n\n\n    tasks.forEach(task =>\n    {\n\n        const tr = createElement('tr',\n            [\n                createElement('<td class=\"col-1\"/>', [\n                    createElement('<form action=\"./\" method=\"post\" class=\"d-flex align-items-center py-1\"/>', {\n                        onsubmit(e)\n                        {\n                            e.preventDefault();\n                        }\n                    },\n                        [\n                            '<input type=\"hidden\" name=\"action\" value=\"update\">',\n                            '<input type=\"hidden\" name=\"id\" value=\"' + task.id + '\">'\n                                `<div class=\"form-check form-switch\">\n                                <input class=\"form-check-input\" aria-label=\"Valide la tâche\" type=\"checkbox\" role=\"switch\" name=\"done\" disabled=\"\" onchange=\"this.form.submit()\">\n                            </div>`\n                        ]\n                    )\n                ]),\n                `<td class=\"col-3\"><div class=\"d-flex align-items-center py-1\">${task.name}</div></td>`,\n                `<td class=\"col-4\"><div class=\"d-flex align-items-center py-1\">${task.description}</div></td>`,\n                `<td class=\"col-2\"><div class=\"d-flex align-items-center py-1\">\n                    <input aria-label=\"Exécuter avant\" type=\"datetime-local\" class=\"form-control form-control-sm\" name=\"end_date\" value=\"${task.end_date}\" disabled=\"\">\n                </div></td>`,\n                createElement(`<td class=\"col-2 text-end\">\n                    <div class=\"d-flex align-items-center py-1\">\n                        <form method=\"post\" action=\"./\">\n                            <input type=\"hidden\" name=\"id\" value=\"${task.id}\">\n                            <button type=\"submit\" name=\"action\" value=\"edit_entry\" title=\"Editer la tâche\" class=\"btn btn-secondary btn-sm\">✎</button>\n                            <button type=\"submit\" name=\"action\" value=\"delete\" title=\"Supprimer la tâche\" class=\"btn btn-danger btn-sm\">×</button>\n                        </form>\n                    </div>\n                </td>`,\n                    {\n                        onsubmit(e)\n                        {\n                            e.preventDefault();\n                        },\n                        onclick(e)\n                        {\n                            const btn = e.target.closest('button');\n                            if (btn)\n                            {\n                                e.preventDefault();\n                                const form = btn.closest(\"form\");\n\n\n                            }\n                        }\n                    }\n                )\n            ]\n        );\n\n        tbody.appendChild(\n\n        );\n\n\n\n\n\n\n    });\n\n\n\n}\n\n\n\n// document.querySelector('form.form-add').addEventListener('submit', e =>\n// {\n//     e.preventDefault();\n\n//     const\n//         form = e.target.closest(\"form\"),\n//         params = Object.fromEntries((new FormData(form)).entries());\n\n\n//     let\n//         now = (new Date()).getTime(),\n//         end_date = (new Date(params.end_date)).getTime(),\n//         valid = now < end_date;\n//     if (form.checkValidity() && valid)\n//     {\n//         Api.addTask(params).then(resp =>\n//         {\n\n//             if (resp.result === 'ok')\n//             {\n\n\n\n//             }\n//         });\n\n//     }\n\n\n\n\n\n// });\n\n\n\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AAGG,MAAC,SAAS,GAAG,OAAO,YAAY,KAAK,WAAW,CAAC;AACpD,IAIa,SAAS,GAAG,YAAY,GAAG,UAAU,IAAI,MAAM;;ACP5D;AACA;AACA;AACA;AACA;AACA,MAAM,WAAW,GAAG,IAAI,GAAG,EAAE,CAAC;AAC9B;AAEgB,QAAQ,CAAC,aAAa,CAAC,gBAAgB,CAAC,CAAC;AACzD,IAAY,QAAQ,CAAC,aAAa,CAAC,OAAO,EAAE;AAC5C;AACA,SAAS,YAAY,CAAC,KAAK;AAC3B;AACA;AACA,IAAI,IAAI,WAAW,CAAC,GAAG,CAAC,KAAK,CAAC;AAC9B,IAAI;AACJ,QAAQ,OAAO;AACf,KAAK;AACL;AACA,IAAI,WAAW,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;AAC3B,IAAI,KAAK,CAAC,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;AACnC,IAAI,UAAU,CAAC;AACf,IAAI;AACJ,QAAQ,KAAK,CAAC,MAAM,EAAE,CAAC;AACvB,KAAK,EAAE,GAAG,CAAC,CAAC;AACZ,CAAC;AACD;AACA;AACA;AACA,SAAS,cAAc,CAAC,KAAK;AAC7B;AACA,IAAI,KAAK,CAAC,gBAAgB,CAAC,OAAO,EAAE,CAAC,EAAE,MAAM,EAAE;AAC/C,IAAI;AACJ,QAAQ,IAAI,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC;AACxC,QAAQ;AACR,YAAY,YAAY,CAAC,KAAK,CAAC,CAAC;AAChC,SAAS;AACT,KAAK,CAAC,CAAC;AACP;AACA,IAAI,UAAU,CAAC;AACf,IAAI;AACJ;AACA,QAAQ,IAAI,KAAK,CAAC,aAAa;AAC/B,QAAQ;AACR,YAAY,YAAY,CAAC,KAAK,CAAC,CAAC;AAChC;AACA,SAAS;AACT;AACA,KAAK,EAAE,IAAI,CAAC,CAAC;AACb,CAAC;AACD;AACA,QAAQ,CAAC,gBAAgB,CAAC,mCAAmC,CAAC,CAAC,OAAO,CAAC,KAAK;AAC5E;AACA,IAAI,cAAc,CAAC,KAAK,CAAC,CAAC;AAC1B,CAAC,CAAC,CAAC;AAgFH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"}